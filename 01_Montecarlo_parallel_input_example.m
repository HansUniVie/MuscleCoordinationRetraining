%% create input files for Monte Carlo simulation
%% Hans Kainz, University of Vienna, hans.kainz@univie.ac.at
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all; close all; format compact; clc; fclose all;
baseDir = 'C:\Users\Hans\Documents\GitHub\MuscleCoordinationRetraining\inputData\PA02\';
% monte carlo input
nr_simulations = 10000;
% load weighting set
load('W_set_monteCarlo_n_10000.mat')
% load muscle names
load('muscle_names_left.mat')
for mu=1:length(muscles)
    muscles{1,mu} = muscles{1,mu}(1:end-2);
    muscles{1,mu} = [muscles{1,mu} '_r'];   
end

% % % Fill Path names
for N = 1 : 10000
INPUTS(N).trialname = 'P02_W_8' ; 
INPUTS(N).forceFilePath = [baseDir 'grf.mot'] ;  % Full path of forces file

INPUTS(N).ikFilePath = [baseDir '\IK_PA02_w8.mot'] ; % Full path of IK file
INPUTS(N).idFilePath = [baseDir '\ID_PA02_w8.sto'] ; % Full path of ID file
INPUTS(N).emgFilePath = {}; %[baseDir '\EMG_allMuscles.sto'] ; % location of *.mot file with normalized EMG (if using EMG)

INPUTS(N).modelDir = [baseDir] ; % full path to folder where model is
INPUTS(N).modelName = 'PA02_FemTibPers_scaled.osim' ; % model file name
INPUTS(N).startTime = 1.07 ;
INPUTS(N).endTime = 1.67; %1.31 whole gait cycle

INPUTS(N).leg = 'r' ; % If deleteContralateralMuscles flag is true, actuates this leg
                   % with muscles and contralateral leg with coordinate actuators 
                   % only. If deleteContralateralMuscles flag is false,
                   % this input doesn't matter.

INPUTS(N).filtFreq = 6 ; % Lowpass filter frequency for IK coordinates. -1 if no filtering 

% Flags
INPUTS(N).appendActuators = true ; % Append reserve actuators at all coordinates?
INPUTS(N).appendForces = true ; % True if you want to append grfs?
INPUTS(N).deleteContralateralMuscles = true ; % replace muscles on contralateral leg with powerful reserve actuators (makes SO faster)
INPUTS(N).useEmgRatios = false ; % true if you want to track EMG ratios defined in INPUTS.emgRatioPairs
INPUTS(N).useEqualMuscles = false ; % true if you want to constrain INPUTS.equalMuscles muscle pairs to be equivalent
INPUTS(N).useEmgConstraints = false ; % true if you want to constrain muscle activations to follow EMG input INPUTS.emgConstrainedMuscles
INPUTS(N).changePassiveForce = false ; % true if want to turn passive forces off
INPUTS(N).ignoreTendonCompliance = false ; % true if making all tendons rigid


% Degrees of Freedom to ignore (patellar coupler constraints, etc.) during moment matching constraint
INPUTS(N).fixedDOFs = {'knee_angle_r_beta','knee_angle_l_beta'} ;
% EMG file
INPUTS(N).emgRatioPairs = {} ; % nPairs x 2 cell for muscle names whos ratios you want to constrain with EMG. Can leave off '_[leg]' if you want it to apply to both
INPUTS(N).equalMuscles = {} ; % nPairs x 2 cell of muscles for whom you want equal activations
INPUTS(N).emgConstrainedMuscles = {} ; % nMuscles x 1 cell of muscles for which you want activation to track EMG.  Can leave off '_[leg]' if you want it to apply to both

INPUTS(N).emgSumThreshold = 0 ; % If sum of emg pairs is less than this it won't show up in the constraint or cost (wherever you put it)

% Weights for reserves, muscles. The weight is in
% the cost function as sum(w*(whatever^2)), so the weight is not squared.
INPUTS(N).reserveActuatorWeights = 1 ; 
INPUTS(N).muscleWeights = 1 ;
INPUTS(N).ipsilateralActuatorStrength = 1 ;
INPUTS(N).contralateralActuatorStrength = 100 ;
INPUTS(N).weightsToOverride = muscles; %{'recfem_l' 'psoas_l' 'sart_l' 'semiten_l' 'glmax2_l'} ; % Overrides the general actuator weight for muscles or reserves.
                                % Can be a partial name. Eg. 'hip_rotation' will change hip_rotation_r and hip_rotation_l
                                % or 'gastroc' to override the weight for the right and left gastroc muscles
 
INPUTS(N).prescribedActuationCoords = {} ; % A column cell with coordinates (exact name) that will be prescribed from ID moments eg. 'knee_adduction_r' 
                                        % The muscles will not aim to balance the moment at this DOF,
                                        % but their contribution to the moment will be computed at the
                                        % end of the optimization step, and the remaining moment generated by
                                        % the reserve actuator
                          
 % External Forces Definitions
INPUTS(N).externalForceName = {'grf_r_3','grf_l_2'} ; % nForces x 1 cell
INPUTS(N).applied_to_body = {'calcn_r','calcn_l'} ; 
INPUTS(N).force_expressed_in_body =  {'ground','ground'} ;
INPUTS(N).force_identifier = {'ground_force_3_v','ground_force_2_v'} ;
INPUTS(N).point_expressed_in_body = {'ground','ground'} ;
INPUTS(N).point_identifier = {'ground_force_3_p','ground_force_2_p'} ;

% Joint Reaction Fields
INPUTS(N).jRxn.inFrame = 'child' ;
INPUTS(N).jRxn.onBody = 'child' ;
INPUTS(N).jRxn.jointNames = ['all'] ;

INPUTS(N).passiveForceStrains = [0 0.7] ; % Default = [0,.7] this is strain at zero force and strain at 1 norm force in Millard model
                                     % This only matters if ignorePassiveForces = true                                  
                                        
                          
    t=zeros(1,nr_simulations);  
    INPUTS(N).outputFilePath = [baseDir 'MonteCarlo\S_' (char(num2str(N)))] ; % full path for SO & JRA outputs
    INPUTS(N).overrideWeights = W_set(N,:); % A column vector the same size as weights % W_ref; 
end    



